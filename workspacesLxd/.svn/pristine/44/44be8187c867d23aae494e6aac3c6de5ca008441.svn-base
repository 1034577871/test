package com.ruoyi.collection.controller;

import java.util.Date;
import java.util.List;

import com.ruoyi.collection.domain.CtBuInvoiceReq;
import com.ruoyi.common.core.domain.model.LoginUser;
import com.ruoyi.common.utils.SecurityUtils;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.ruoyi.common.annotation.Log;
import com.ruoyi.common.core.controller.BaseController;
import com.ruoyi.common.core.domain.AjaxResult;
import com.ruoyi.common.enums.BusinessType;
import com.ruoyi.collection.domain.CtBuInvoiceInfo;
import com.ruoyi.collection.service.ICtBuInvoiceInfoService;
import com.ruoyi.common.utils.poi.ExcelUtil;
import com.ruoyi.common.core.page.TableDataInfo;

/**
 * 财务开票Controller
 * 
 * @author ruoyi
 * @date 2020-12-11
 */
@RestController
@RequestMapping("/collection/financial")
public class CtBuInvoiceInfoController extends BaseController
{
    @Autowired
    private ICtBuInvoiceInfoService ctBuInvoiceInfoService;

    /**
     * 查询财务开票列表
     */
//    @PreAuthorize("@ss.hasPermi('collection:financial:list')")
    @GetMapping("/list")
    public TableDataInfo list(CtBuInvoiceInfo ctBuInvoiceInfo)
    {
        startPage();
        /** 判断当前登录人 **/
        LoginUser loginUser = SecurityUtils.getLoginUser();
        if(ctBuInvoiceInfo.getCtBuInvoiceReq()==null){
            ctBuInvoiceInfo.setCtBuInvoiceReq(new CtBuInvoiceReq());
        }
        if(ctBuInvoiceInfo!=null && ctBuInvoiceInfo.getStatus()!=null && ctBuInvoiceInfo.getStatus()==100){
            ctBuInvoiceInfo.setStatus(2);
            ctBuInvoiceInfo.setCreateBy(loginUser.getUser().getUserId().toString());
        }
        if(ctBuInvoiceInfo!=null && ctBuInvoiceInfo.getStatus()!=null && ctBuInvoiceInfo.getStatus()==200){
            ctBuInvoiceInfo.setStatus(1);
            //ctBuInvoiceInfo.setCreateBy(loginUser.getUser().getUserId().toString());
        }
        List<CtBuInvoiceInfo> list = ctBuInvoiceInfoService.selectCtBuInvoiceInfoList(ctBuInvoiceInfo);
        return getDataTable(list);
    }

    /**
     * 导出财务开票列表
     */
    @PreAuthorize("@ss.hasPermi('collection:financial:export')")
    @Log(title = "财务开票", businessType = BusinessType.EXPORT)
    @GetMapping("/export")
    public AjaxResult export(CtBuInvoiceInfo ctBuInvoiceInfo)
    {
        List<CtBuInvoiceInfo> list = ctBuInvoiceInfoService.selectCtBuInvoiceInfoList(ctBuInvoiceInfo);
        ExcelUtil<CtBuInvoiceInfo> util = new ExcelUtil<CtBuInvoiceInfo>(CtBuInvoiceInfo.class);
        return util.exportExcel(list, "financial");
    }

    /**
     * 获取财务开票详细信息
     */
   // @PreAuthorize("@ss.hasPermi('collection:financial:query')")
    @GetMapping(value = "/{id}/{rid}")
    public AjaxResult getInfo(@PathVariable("id") String id,@PathVariable("rid") String rid)
    {
        CtBuInvoiceInfo ctBuInvoiceInfo = ctBuInvoiceInfoService.selectCtBuInvoiceInfoById(id);
        if(ctBuInvoiceInfo == null){
            /** 判断当前登录人 **/
            LoginUser loginUser = SecurityUtils.getLoginUser();
            ctBuInvoiceInfo = new CtBuInvoiceInfo();
            ctBuInvoiceInfo.setReqId(rid);
            ctBuInvoiceInfo.setInvoiceDrawer(loginUser.getUser().getNickName());
            ctBuInvoiceInfo.setVoucherDept(loginUser.getUser().getDept().getDeptName());
            ctBuInvoiceInfo.setRemark(loginUser.getUser().getDept().getDeptName());
            ctBuInvoiceInfo.setVoucherTime(new Date());
        }
        return AjaxResult.success(ctBuInvoiceInfo);
    }
    /**
     * 获取财务开票详细信息
     */
    // @PreAuthorize("@ss.hasPermi('collection:financial:query')")
    @GetMapping(value = "/getVoInfo/{id}/{rid}")
    public AjaxResult getVoInfo(@PathVariable("id") String id,@PathVariable("rid") String rid)
    {
        CtBuInvoiceInfo ctBuInvoiceInfo = ctBuInvoiceInfoService.selectCtBuInvoiceInfoById(id);
        if(ctBuInvoiceInfo == null || ctBuInvoiceInfo.getVoucherNo()==null){
            /** 判断当前登录人 **/
            LoginUser loginUser = SecurityUtils.getLoginUser();
            ctBuInvoiceInfo = new CtBuInvoiceInfo();
            ctBuInvoiceInfo.setReqId(rid);
            ctBuInvoiceInfo.setInvoiceDrawer(loginUser.getUser().getNickName());
            ctBuInvoiceInfo.setVoucherDept(loginUser.getUser().getDept().getDeptName());
            ctBuInvoiceInfo.setRemark(loginUser.getUser().getDept().getDeptName());
            ctBuInvoiceInfo.setVoucherTime(new Date());
        }
        return AjaxResult.success(ctBuInvoiceInfo);
    }
    /**
     * 新增财务开票
     */
    //@PreAuthorize("@ss.hasPermi('collection:financial:add')")
    @Log(title = "财务开票", businessType = BusinessType.INSERT)
    @PostMapping
    public AjaxResult add(@RequestBody CtBuInvoiceInfo ctBuInvoiceInfo)
    {
        return toAjax(ctBuInvoiceInfoService.insertCtBuInvoiceInfo(ctBuInvoiceInfo));
    }

    /**
     * 修改财务开票
     */
   // @PreAuthorize("@ss.hasPermi('collection:financial:edit')")
    @Log(title = "财务开票", businessType = BusinessType.UPDATE)
    @PutMapping
    public AjaxResult edit(@RequestBody CtBuInvoiceInfo ctBuInvoiceInfo)
    {
        return toAjax(ctBuInvoiceInfoService.updateCtBuInvoiceInfo(ctBuInvoiceInfo));
    }

    /**
     * 删除财务开票
     */
    @PreAuthorize("@ss.hasPermi('collection:financial:remove')")
    @Log(title = "财务开票", businessType = BusinessType.DELETE)
	@DeleteMapping("/{ids}")
    public AjaxResult remove(@PathVariable String[] ids)
    {
        return toAjax(ctBuInvoiceInfoService.deleteCtBuInvoiceInfoByIds(ids));
    }

    /**
     * 移交财务开票
     */
    //@PreAuthorize("@ss.hasAnyPermi('collection:financial:moveFinal,collection:financial:confirmFinal,collection:financial:query')")
    @Log(title = "财务开票")
    @GetMapping("/moveFinal/{id}/{flag}")
    public AjaxResult moveFinal(@PathVariable String id,@PathVariable String flag)
    {
        String[] ids = null;
        if(id!=null && !"".equals(id)){
            if(id.indexOf(",")>0){
                ids = id.split(",");
            }else{
                ids = new String[1];
                ids[0] = id;
            }
        }
        return toAjax(ctBuInvoiceInfoService.updateCtBuInvoiceInfoByIds(ids,flag));
    }

    /**
     * 凭证号录入
     */
    //@PreAuthorize("@ss.hasAnyPermi('collection:financial:saveVoucher')")
    @Log(title = "凭证号录入")
    @GetMapping("/saveVoucher/{id}/{vocher}/{datees}/{vodept}")
    public AjaxResult saveVoucher(@PathVariable String id,@PathVariable String vocher,@PathVariable Date datees,@PathVariable String vodept)
    {
        String[] ids = new String[1];
        if(id!=null && !"".equals(id)){
            if(id.indexOf(",")>0){
                ids = id.split(",");
            }else{
                ids[0] = id;
            }
        }
        return toAjax(ctBuInvoiceInfoService.updateVocherInfoByIds(ids,vocher,datees,vodept));
    }

    /**
     * 开票统计
     * @param beginTime
     * @param endTime
     * @return
     */
    @Log(title = "开票统计")
    @GetMapping("/invoiceStatistics")
    public List invoiceStatistics(Date beginTime, Date endTime){
        System.err.println(beginTime);
        System.err.println(endTime);
        List list = ctBuInvoiceInfoService.invoiceStatistics(beginTime, endTime);
        return list;
    }
}
