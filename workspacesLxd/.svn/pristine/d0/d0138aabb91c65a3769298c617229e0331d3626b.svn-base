package com.ruoyi.projectApproval.ApprovalNg.service.impl;

import java.io.Serializable;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;

import com.ruoyi.common.utils.DateUtils;
import com.ruoyi.common.utils.SecurityUtils;
import com.ruoyi.common.utils.uuid.UUID;
import com.ruoyi.projectApproval.AppNgBase.domain.AppNgBase;
import com.ruoyi.projectApproval.AppNgBase.service.IAppNgBaseService;
import com.ruoyi.projectApproval.AppNgConst.domain.AppNgConst;
import com.ruoyi.projectApproval.AppNgConst.service.IAppNgConstService;
import com.ruoyi.projectApproval.AppNgMaterial.domain.AppNgMaterial;
import com.ruoyi.projectApproval.AppNgMaterial.service.IAppNgMaterialService;
import com.ruoyi.projectApproval.ApprovalNg.domain.CtBuApprovalNg;
import com.ruoyi.projectApproval.ApprovalNg.mapper.CtBuApprovalNgMapper;
import com.ruoyi.projectApproval.ApprovalNg.service.ICtBuApprovalNgService;
import com.ruoyi.projectApproval.AppxNgReq.domain.AppxNgReq;
import com.ruoyi.projectApproval.AppxNgReq.service.IAppxNgReqService;

/**
 * @Title: CtBuApprovalNgServiceImpl.java
 * @Description: 集客项目Service
 * @Author M.Mu
 * @Date 2020-12-08
 */
@Service
public class CtBuApprovalNgServiceImpl implements ICtBuApprovalNgService {

	@Autowired
	private CtBuApprovalNgMapper ctBuApprovalNgMapper;

	@Autowired
	private IAppNgBaseService appNgBaseService;

	@Autowired
	private IAppNgConstService appNgConstService;

	@Autowired
	private IAppNgMaterialService appNgMaterialService;

	@Autowired
	private IAppxNgReqService appxNgReqService;

	@Autowired
	private RedisTemplate<String, Serializable> redis1;

	/**
	 * 查询事前审批主(集客类)
	 * 
	 * @param id 事前审批主(集客类)ID
	 * @return 事前审批主(集客类)
	 */
	@Override
	public CtBuApprovalNg selectCtBuApprovalNgById(String id) {
		String key = "CtBuApprovalNg";
		String hashKey = id;
		/** 判断当前ID是否存在 **/
		if (redis1.opsForHash().hasKey(key, hashKey)) {
			CtBuApprovalNg ctBuApprovalNg = (CtBuApprovalNg) redis1.opsForHash().get(key, hashKey);
			if (ctBuApprovalNg != null && StringUtils.isNotBlank(ctBuApprovalNg.getId())) {
				return ctBuApprovalNg;
			} else {
				return new CtBuApprovalNg();
			}
		} else {
			CtBuApprovalNg ctBuApprovalNg = ctBuApprovalNgMapper.selectCtBuApprovalNgById(id);
			if (ctBuApprovalNg != null && StringUtils.isNotBlank(ctBuApprovalNg.getId())) {
				/** 项目基本情况 **/
				AppNgBase appNgBase = appNgBaseService.selectAppNgBaseByBid(id);
				if (appNgBase != null && StringUtils.isNotBlank(appNgBase.getId())) {
					ctBuApprovalNg.setAppNgBase(appNgBase);
				} else {
					ctBuApprovalNg.setAppNgBase(new AppNgBase());
				}
				/** 施工费情况 **/
				AppNgConst appNgConst = appNgConstService.selectAppNgConstByBid(appNgBase.getId());
				if (appNgConst != null && StringUtils.isNotBlank(appNgConst.getId())) {
					ctBuApprovalNg.setAppNgConst(appNgConst);
				} else {
					ctBuApprovalNg.setAppNgConst(new AppNgConst());
				}
				/** 材料使用情况 **/
				AppNgMaterial appNgMaterial = appNgMaterialService.selectAppNgMaterialByBid(appNgBase.getId());
				if (appNgMaterial != null && StringUtils.isNotBlank(appNgMaterial.getId())) {
					ctBuApprovalNg.setAppNgMaterial(appNgMaterial);
				} else {
					ctBuApprovalNg.setAppNgMaterial(new AppNgMaterial());
				}
				/** 事前审批 **/
				AppxNgReq appxNgReq = appxNgReqService.selectAppxNgReqByBid(appNgBase.getId());
				if (appxNgReq != null && StringUtils.isNotBlank(appxNgReq.getId())) {
					ctBuApprovalNg.setAppxNgReq(appxNgReq);
				} else {
					ctBuApprovalNg.setAppxNgReq(new AppxNgReq());
				}
				redis1.opsForHash().put(key, hashKey, ctBuApprovalNg);
				return ctBuApprovalNg;
			} else {
				return new CtBuApprovalNg();
			}
		}
	}

	/**
	 * 查询事前审批主(集客类)列表
	 * 
	 * @param ctBuApprovalNg 事前审批主(集客类)
	 * @return 事前审批主(集客类)
	 */
	@Override
	public List<CtBuApprovalNg> selectCtBuApprovalNgList(CtBuApprovalNg ctBuApprovalNg) {
		return ctBuApprovalNgMapper.selectCtBuApprovalNgList(ctBuApprovalNg);
	}

	/**
	 * 新增事前审批主(集客类)
	 * 
	 * @param ctBuApprovalNg 事前审批主(集客类)
	 * @return 结果
	 */
	@Override
	public int insertCtBuApprovalNg(CtBuApprovalNg ctBuApprovalNg) {
		ctBuApprovalNg.setId(UUID.fastUUID().toString(true));
		String userId = "";
		try {
			userId = SecurityUtils.getLoginUser().getUser().getUserId().toString();
		} catch (Exception e) {

		}
		ctBuApprovalNg.setCreateBy(userId);
		ctBuApprovalNg.setCreateTime(DateUtils.getNowDate());

		/** 项目基本情况 **/
		AppNgBase appNgBase = ctBuApprovalNg.getAppNgBase();
		appNgBase.setId(UUID.fastUUID().toString(true));
		appNgBase.setBid(ctBuApprovalNg.getId());
		appNgBase.setCreateBy(userId);
		appNgBaseService.insertAppNgBase(appNgBase);

		/** 施工费情况 **/
		AppNgConst appNgConst = ctBuApprovalNg.getAppNgConst();
		appNgConst.setId(UUID.fastUUID().toString(true));
		appNgConst.setBid(ctBuApprovalNg.getId());
		appNgConst.setCreateBy(userId);
		appNgConstService.insertAppNgConst(appNgConst);

		/** 材料使用情况 **/
		AppNgMaterial appNgMaterial = ctBuApprovalNg.getAppNgMaterial();
		appNgMaterial.setId(UUID.fastUUID().toString(true));
		appNgMaterial.setBid(ctBuApprovalNg.getId());
		appNgMaterial.setCreateBy(userId);
		appNgMaterialService.insertAppNgMaterial(appNgMaterial);

		/** 事前审批 **/
		AppxNgReq appxNgReq = ctBuApprovalNg.getAppxNgReq();
		appxNgReq.setId(UUID.fastUUID().toString(true));
		appxNgReq.setBid(ctBuApprovalNg.getId());
		appxNgReq.setCreateBy(userId);
		appxNgReqService.insertAppxNgReq(appxNgReq);

		return ctBuApprovalNgMapper.insertCtBuApprovalNg(ctBuApprovalNg);
	}

	/**
	 * 修改事前审批主(集客类)
	 * 
	 * @param ctBuApprovalNg 事前审批主(集客类)
	 * @return 结果
	 */
	@Override
	public int updateCtBuApprovalNg(CtBuApprovalNg ctBuApprovalNg) {
		ctBuApprovalNg.setUpdateTime(DateUtils.getNowDate());
		/** 项目基本情况 **/
		appNgBaseService.updateAppNgBase(ctBuApprovalNg.getAppNgBase());
		/** 施工费情况 **/
		appNgConstService.updateAppNgConst(ctBuApprovalNg.getAppNgConst());
		/** 材料使用情况 **/
		appNgMaterialService.updateAppNgMaterial(ctBuApprovalNg.getAppNgMaterial());
		/** 事前审批 **/
		appxNgReqService.updateAppxNgReq(ctBuApprovalNg.getAppxNgReq());
		return ctBuApprovalNgMapper.updateCtBuApprovalNg(ctBuApprovalNg);
	}

	/**
	 * 批量删除事前审批主(集客类)
	 * 
	 * @param ids 需要删除的事前审批主(集客类)ID
	 * @return 结果
	 */
	@Override
	public int deleteCtBuApprovalNgByIds(String[] ids) {
		if (ids != null && ids.length > 0) {
			for (int i = 0; i < ids.length; i++) {
				/** 逻辑删除事前审批主表信息 **/
				Integer numFlag = ctBuApprovalNgMapper.deleteCtBuApprovalNgById(ids[i]);
				if (numFlag != null && numFlag > 0) {
					/** 项目基本情况 **/
					appNgBaseService.deleteAppNgBaseByBid(ids[i]);
					/** 施工费情况 **/
					appNgConstService.deleteAppNgConstByBid(ids[i]);
					/** 材料使用情况 **/
					appNgMaterialService.deleteAppNgMaterialByBid(ids[i]);
					/** 事前审批 **/
					appxNgReqService.deleteAppxNgReqByBid(ids[i]);
				}
			}
		}
		return 1;
	}

	/**
	 * 删除事前审批主(集客类)信息
	 * 
	 * @param id 事前审批主(集客类)ID
	 * @return 结果
	 */
	@Override
	public int deleteCtBuApprovalNgById(String id) {
		/** 逻辑删除事前审批主表信息 **/
		Integer numFlag = ctBuApprovalNgMapper.deleteCtBuApprovalNgById(id);
		if (numFlag != null && numFlag > 0) {
			/** 项目基本情况 **/
			appNgBaseService.deleteAppNgBaseByBid(id);
			/** 施工费情况 **/
			appNgConstService.deleteAppNgConstByBid(id);
			/** 材料使用情况 **/
			appNgMaterialService.deleteAppNgMaterialByBid(id);
			/** 事前审批 **/
			appxNgReqService.deleteAppxNgReqByBid(id);
		}
		return numFlag;
	}
}